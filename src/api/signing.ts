/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.20.1
 * source: signing.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from './google/protobuf/timestamp';
import * as dependency_2 from './client';
import * as pb_1 from 'google-protobuf';
export namespace api {
	export enum TokenVersion {
		BARE_REPL_TOKEN = 0,
		TYPE_AWARE_TOKEN = 1,
	}
	export enum FlagClaim {
		MINT_GOVAL_TOKEN = 0,
		SIGN_INTERMEDIATE_CERT = 1,
		IDENTITY = 5,
		ANY_REPLID = 2,
		ANY_USER = 3,
		ANY_CLUSTER = 4,
	}
	export class GovalSigningAuthority extends pb_1.Message {
		#one_of_decls: number[][] = [[1, 2]];
		constructor(
			data?:
				| any[]
				| ({
						version?: TokenVersion;
						issuer?: string;
				  } & (
						| {
								key_id?: string;
								signed_cert?: never;
						  }
						| {
								key_id?: never;
								signed_cert?: string;
						  }
				  )),
		) {
			super();
			pb_1.Message.initialize(
				this,
				Array.isArray(data) ? data : [],
				0,
				-1,
				[],
				this.#one_of_decls,
			);
			if (!Array.isArray(data) && typeof data == 'object') {
				if ('key_id' in data && data.key_id != undefined) {
					this.key_id = data.key_id;
				}
				if ('signed_cert' in data && data.signed_cert != undefined) {
					this.signed_cert = data.signed_cert;
				}
				if ('version' in data && data.version != undefined) {
					this.version = data.version;
				}
				if ('issuer' in data && data.issuer != undefined) {
					this.issuer = data.issuer;
				}
			}
		}
		get key_id() {
			return pb_1.Message.getFieldWithDefault(this, 1, '') as string;
		}
		set key_id(value: string) {
			pb_1.Message.setOneofField(this, 1, this.#one_of_decls[0], value);
		}
		get has_key_id() {
			return pb_1.Message.getField(this, 1) != null;
		}
		get signed_cert() {
			return pb_1.Message.getFieldWithDefault(this, 2, '') as string;
		}
		set signed_cert(value: string) {
			pb_1.Message.setOneofField(this, 2, this.#one_of_decls[0], value);
		}
		get has_signed_cert() {
			return pb_1.Message.getField(this, 2) != null;
		}
		get version() {
			return pb_1.Message.getFieldWithDefault(
				this,
				3,
				TokenVersion.BARE_REPL_TOKEN,
			) as TokenVersion;
		}
		set version(value: TokenVersion) {
			pb_1.Message.setField(this, 3, value);
		}
		get issuer() {
			return pb_1.Message.getFieldWithDefault(this, 4, '') as string;
		}
		set issuer(value: string) {
			pb_1.Message.setField(this, 4, value);
		}
		get cert() {
			const cases: {
				[index: number]: 'none' | 'key_id' | 'signed_cert';
			} = {
				0: 'none',
				1: 'key_id',
				2: 'signed_cert',
			};
			return cases[pb_1.Message.computeOneofCase(this, [1, 2])];
		}
		static fromObject(data: {
			key_id?: string;
			signed_cert?: string;
			version?: TokenVersion;
			issuer?: string;
		}): GovalSigningAuthority {
			const message = new GovalSigningAuthority({});
			if (data.key_id != null) {
				message.key_id = data.key_id;
			}
			if (data.signed_cert != null) {
				message.signed_cert = data.signed_cert;
			}
			if (data.version != null) {
				message.version = data.version;
			}
			if (data.issuer != null) {
				message.issuer = data.issuer;
			}
			return message;
		}
		toObject() {
			const data: {
				key_id?: string;
				signed_cert?: string;
				version?: TokenVersion;
				issuer?: string;
			} = {};
			if (this.key_id != null) {
				data.key_id = this.key_id;
			}
			if (this.signed_cert != null) {
				data.signed_cert = this.signed_cert;
			}
			if (this.version != null) {
				data.version = this.version;
			}
			if (this.issuer != null) {
				data.issuer = this.issuer;
			}
			return data;
		}
		serialize(): Uint8Array;
		serialize(w: pb_1.BinaryWriter): void;
		serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
			const writer = w || new pb_1.BinaryWriter();
			if (this.has_key_id) writer.writeString(1, this.key_id);
			if (this.has_signed_cert) writer.writeString(2, this.signed_cert);
			if (this.version != TokenVersion.BARE_REPL_TOKEN)
				writer.writeEnum(3, this.version);
			if (this.issuer.length) writer.writeString(4, this.issuer);
			if (!w) return writer.getResultBuffer();
		}
		static deserialize(
			bytes: Uint8Array | pb_1.BinaryReader,
		): GovalSigningAuthority {
			const reader =
					bytes instanceof pb_1.BinaryReader
						? bytes
						: new pb_1.BinaryReader(bytes),
				message = new GovalSigningAuthority();
			while (reader.nextField()) {
				if (reader.isEndGroup()) break;
				switch (reader.getFieldNumber()) {
					case 1:
						message.key_id = reader.readString();
						break;
					case 2:
						message.signed_cert = reader.readString();
						break;
					case 3:
						message.version = reader.readEnum();
						break;
					case 4:
						message.issuer = reader.readString();
						break;
					default:
						reader.skipField();
				}
			}
			return message;
		}
		serializeBinary(): Uint8Array {
			return this.serialize();
		}
		static deserializeBinary(bytes: Uint8Array): GovalSigningAuthority {
			return GovalSigningAuthority.deserialize(bytes);
		}
	}
	export class CertificateClaim extends pb_1.Message {
		#one_of_decls: number[][] = [[1, 2, 4, 3]];
		constructor(
			data?:
				| any[]
				| ({} & (
						| {
								replid?: string;
								user?: never;
								cluster?: never;
								flag?: never;
						  }
						| {
								replid?: never;
								user?: string;
								cluster?: never;
								flag?: never;
						  }
						| {
								replid?: never;
								user?: never;
								cluster?: string;
								flag?: never;
						  }
						| {
								replid?: never;
								user?: never;
								cluster?: never;
								flag?: FlagClaim;
						  }
				  )),
		) {
			super();
			pb_1.Message.initialize(
				this,
				Array.isArray(data) ? data : [],
				0,
				-1,
				[],
				this.#one_of_decls,
			);
			if (!Array.isArray(data) && typeof data == 'object') {
				if ('replid' in data && data.replid != undefined) {
					this.replid = data.replid;
				}
				if ('user' in data && data.user != undefined) {
					this.user = data.user;
				}
				if ('cluster' in data && data.cluster != undefined) {
					this.cluster = data.cluster;
				}
				if ('flag' in data && data.flag != undefined) {
					this.flag = data.flag;
				}
			}
		}
		get replid() {
			return pb_1.Message.getFieldWithDefault(this, 1, '') as string;
		}
		set replid(value: string) {
			pb_1.Message.setOneofField(this, 1, this.#one_of_decls[0], value);
		}
		get has_replid() {
			return pb_1.Message.getField(this, 1) != null;
		}
		get user() {
			return pb_1.Message.getFieldWithDefault(this, 2, '') as string;
		}
		set user(value: string) {
			pb_1.Message.setOneofField(this, 2, this.#one_of_decls[0], value);
		}
		get has_user() {
			return pb_1.Message.getField(this, 2) != null;
		}
		get cluster() {
			return pb_1.Message.getFieldWithDefault(this, 4, '') as string;
		}
		set cluster(value: string) {
			pb_1.Message.setOneofField(this, 4, this.#one_of_decls[0], value);
		}
		get has_cluster() {
			return pb_1.Message.getField(this, 4) != null;
		}
		get flag() {
			return pb_1.Message.getFieldWithDefault(
				this,
				3,
				FlagClaim.MINT_GOVAL_TOKEN,
			) as FlagClaim;
		}
		set flag(value: FlagClaim) {
			pb_1.Message.setOneofField(this, 3, this.#one_of_decls[0], value);
		}
		get has_flag() {
			return pb_1.Message.getField(this, 3) != null;
		}
		get claim() {
			const cases: {
				[index: number]:
					| 'none'
					| 'replid'
					| 'user'
					| 'cluster'
					| 'flag';
			} = {
				0: 'none',
				1: 'replid',
				2: 'user',
				4: 'cluster',
				3: 'flag',
			};
			return cases[pb_1.Message.computeOneofCase(this, [1, 2, 4, 3])];
		}
		static fromObject(data: {
			replid?: string;
			user?: string;
			cluster?: string;
			flag?: FlagClaim;
		}): CertificateClaim {
			const message = new CertificateClaim({});
			if (data.replid != null) {
				message.replid = data.replid;
			}
			if (data.user != null) {
				message.user = data.user;
			}
			if (data.cluster != null) {
				message.cluster = data.cluster;
			}
			if (data.flag != null) {
				message.flag = data.flag;
			}
			return message;
		}
		toObject() {
			const data: {
				replid?: string;
				user?: string;
				cluster?: string;
				flag?: FlagClaim;
			} = {};
			if (this.replid != null) {
				data.replid = this.replid;
			}
			if (this.user != null) {
				data.user = this.user;
			}
			if (this.cluster != null) {
				data.cluster = this.cluster;
			}
			if (this.flag != null) {
				data.flag = this.flag;
			}
			return data;
		}
		serialize(): Uint8Array;
		serialize(w: pb_1.BinaryWriter): void;
		serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
			const writer = w || new pb_1.BinaryWriter();
			if (this.has_replid) writer.writeString(1, this.replid);
			if (this.has_user) writer.writeString(2, this.user);
			if (this.has_cluster) writer.writeString(4, this.cluster);
			if (this.has_flag) writer.writeEnum(3, this.flag);
			if (!w) return writer.getResultBuffer();
		}
		static deserialize(
			bytes: Uint8Array | pb_1.BinaryReader,
		): CertificateClaim {
			const reader =
					bytes instanceof pb_1.BinaryReader
						? bytes
						: new pb_1.BinaryReader(bytes),
				message = new CertificateClaim();
			while (reader.nextField()) {
				if (reader.isEndGroup()) break;
				switch (reader.getFieldNumber()) {
					case 1:
						message.replid = reader.readString();
						break;
					case 2:
						message.user = reader.readString();
						break;
					case 4:
						message.cluster = reader.readString();
						break;
					case 3:
						message.flag = reader.readEnum();
						break;
					default:
						reader.skipField();
				}
			}
			return message;
		}
		serializeBinary(): Uint8Array {
			return this.serialize();
		}
		static deserializeBinary(bytes: Uint8Array): CertificateClaim {
			return CertificateClaim.deserialize(bytes);
		}
	}
	export class GovalCert extends pb_1.Message {
		#one_of_decls: number[][] = [];
		constructor(
			data?:
				| any[]
				| {
						iat?: dependency_1.google.protobuf.Timestamp;
						exp?: dependency_1.google.protobuf.Timestamp;
						claims?: CertificateClaim[];
						publicKey?: string;
				  },
		) {
			super();
			pb_1.Message.initialize(
				this,
				Array.isArray(data) ? data : [],
				0,
				-1,
				[3],
				this.#one_of_decls,
			);
			if (!Array.isArray(data) && typeof data == 'object') {
				if ('iat' in data && data.iat != undefined) {
					this.iat = data.iat;
				}
				if ('exp' in data && data.exp != undefined) {
					this.exp = data.exp;
				}
				if ('claims' in data && data.claims != undefined) {
					this.claims = data.claims;
				}
				if ('publicKey' in data && data.publicKey != undefined) {
					this.publicKey = data.publicKey;
				}
			}
		}
		get iat() {
			return pb_1.Message.getWrapperField(
				this,
				dependency_1.google.protobuf.Timestamp,
				1,
			) as dependency_1.google.protobuf.Timestamp;
		}
		set iat(value: dependency_1.google.protobuf.Timestamp) {
			pb_1.Message.setWrapperField(this, 1, value);
		}
		get has_iat() {
			return pb_1.Message.getField(this, 1) != null;
		}
		get exp() {
			return pb_1.Message.getWrapperField(
				this,
				dependency_1.google.protobuf.Timestamp,
				2,
			) as dependency_1.google.protobuf.Timestamp;
		}
		set exp(value: dependency_1.google.protobuf.Timestamp) {
			pb_1.Message.setWrapperField(this, 2, value);
		}
		get has_exp() {
			return pb_1.Message.getField(this, 2) != null;
		}
		get claims() {
			return pb_1.Message.getRepeatedWrapperField(
				this,
				CertificateClaim,
				3,
			) as CertificateClaim[];
		}
		set claims(value: CertificateClaim[]) {
			pb_1.Message.setRepeatedWrapperField(this, 3, value);
		}
		get publicKey() {
			return pb_1.Message.getFieldWithDefault(this, 4, '') as string;
		}
		set publicKey(value: string) {
			pb_1.Message.setField(this, 4, value);
		}
		static fromObject(data: {
			iat?: ReturnType<
				typeof dependency_1.google.protobuf.Timestamp.prototype.toObject
			>;
			exp?: ReturnType<
				typeof dependency_1.google.protobuf.Timestamp.prototype.toObject
			>;
			claims?: ReturnType<typeof CertificateClaim.prototype.toObject>[];
			publicKey?: string;
		}): GovalCert {
			const message = new GovalCert({});
			if (data.iat != null) {
				message.iat = dependency_1.google.protobuf.Timestamp.fromObject(
					data.iat,
				);
			}
			if (data.exp != null) {
				message.exp = dependency_1.google.protobuf.Timestamp.fromObject(
					data.exp,
				);
			}
			if (data.claims != null) {
				message.claims = data.claims.map((item) =>
					CertificateClaim.fromObject(item),
				);
			}
			if (data.publicKey != null) {
				message.publicKey = data.publicKey;
			}
			return message;
		}
		toObject() {
			const data: {
				iat?: ReturnType<
					typeof dependency_1.google.protobuf.Timestamp.prototype.toObject
				>;
				exp?: ReturnType<
					typeof dependency_1.google.protobuf.Timestamp.prototype.toObject
				>;
				claims?: ReturnType<
					typeof CertificateClaim.prototype.toObject
				>[];
				publicKey?: string;
			} = {};
			if (this.iat != null) {
				data.iat = this.iat.toObject();
			}
			if (this.exp != null) {
				data.exp = this.exp.toObject();
			}
			if (this.claims != null) {
				data.claims = this.claims.map((item: CertificateClaim) =>
					item.toObject(),
				);
			}
			if (this.publicKey != null) {
				data.publicKey = this.publicKey;
			}
			return data;
		}
		serialize(): Uint8Array;
		serialize(w: pb_1.BinaryWriter): void;
		serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
			const writer = w || new pb_1.BinaryWriter();
			if (this.has_iat)
				writer.writeMessage(1, this.iat, () =>
					this.iat.serialize(writer),
				);
			if (this.has_exp)
				writer.writeMessage(2, this.exp, () =>
					this.exp.serialize(writer),
				);
			if (this.claims.length)
				writer.writeRepeatedMessage(
					3,
					this.claims,
					(item: CertificateClaim) => item.serialize(writer),
				);
			if (this.publicKey.length) writer.writeString(4, this.publicKey);
			if (!w) return writer.getResultBuffer();
		}
		static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GovalCert {
			const reader =
					bytes instanceof pb_1.BinaryReader
						? bytes
						: new pb_1.BinaryReader(bytes),
				message = new GovalCert();
			while (reader.nextField()) {
				if (reader.isEndGroup()) break;
				switch (reader.getFieldNumber()) {
					case 1:
						reader.readMessage(
							message.iat,
							() =>
								(message.iat =
									dependency_1.google.protobuf.Timestamp.deserialize(
										reader,
									)),
						);
						break;
					case 2:
						reader.readMessage(
							message.exp,
							() =>
								(message.exp =
									dependency_1.google.protobuf.Timestamp.deserialize(
										reader,
									)),
						);
						break;
					case 3:
						reader.readMessage(message.claims, () =>
							pb_1.Message.addToRepeatedWrapperField(
								message,
								3,
								CertificateClaim.deserialize(reader),
								CertificateClaim,
							),
						);
						break;
					case 4:
						message.publicKey = reader.readString();
						break;
					default:
						reader.skipField();
				}
			}
			return message;
		}
		serializeBinary(): Uint8Array {
			return this.serialize();
		}
		static deserializeBinary(bytes: Uint8Array): GovalCert {
			return GovalCert.deserialize(bytes);
		}
	}
	export class GovalToken extends pb_1.Message {
		#one_of_decls: number[][] = [[4, 5]];
		constructor(
			data?:
				| any[]
				| ({
						iat?: dependency_1.google.protobuf.Timestamp;
						exp?: dependency_1.google.protobuf.Timestamp;
						replid?: string;
				  } & (
						| {
								repl_token?: dependency_2.api.ReplToken;
								repl_identity?: never;
						  }
						| {
								repl_token?: never;
								repl_identity?: GovalReplIdentity;
						  }
				  )),
		) {
			super();
			pb_1.Message.initialize(
				this,
				Array.isArray(data) ? data : [],
				0,
				-1,
				[],
				this.#one_of_decls,
			);
			if (!Array.isArray(data) && typeof data == 'object') {
				if ('iat' in data && data.iat != undefined) {
					this.iat = data.iat;
				}
				if ('exp' in data && data.exp != undefined) {
					this.exp = data.exp;
				}
				if ('replid' in data && data.replid != undefined) {
					this.replid = data.replid;
				}
				if ('repl_token' in data && data.repl_token != undefined) {
					this.repl_token = data.repl_token;
				}
				if (
					'repl_identity' in data &&
					data.repl_identity != undefined
				) {
					this.repl_identity = data.repl_identity;
				}
			}
		}
		get iat() {
			return pb_1.Message.getWrapperField(
				this,
				dependency_1.google.protobuf.Timestamp,
				1,
			) as dependency_1.google.protobuf.Timestamp;
		}
		set iat(value: dependency_1.google.protobuf.Timestamp) {
			pb_1.Message.setWrapperField(this, 1, value);
		}
		get has_iat() {
			return pb_1.Message.getField(this, 1) != null;
		}
		get exp() {
			return pb_1.Message.getWrapperField(
				this,
				dependency_1.google.protobuf.Timestamp,
				2,
			) as dependency_1.google.protobuf.Timestamp;
		}
		set exp(value: dependency_1.google.protobuf.Timestamp) {
			pb_1.Message.setWrapperField(this, 2, value);
		}
		get has_exp() {
			return pb_1.Message.getField(this, 2) != null;
		}
		get replid() {
			return pb_1.Message.getFieldWithDefault(this, 3, '') as string;
		}
		set replid(value: string) {
			pb_1.Message.setField(this, 3, value);
		}
		get repl_token() {
			return pb_1.Message.getWrapperField(
				this,
				dependency_2.api.ReplToken,
				4,
			) as dependency_2.api.ReplToken;
		}
		set repl_token(value: dependency_2.api.ReplToken) {
			pb_1.Message.setOneofWrapperField(
				this,
				4,
				this.#one_of_decls[0],
				value,
			);
		}
		get has_repl_token() {
			return pb_1.Message.getField(this, 4) != null;
		}
		get repl_identity() {
			return pb_1.Message.getWrapperField(
				this,
				GovalReplIdentity,
				5,
			) as GovalReplIdentity;
		}
		set repl_identity(value: GovalReplIdentity) {
			pb_1.Message.setOneofWrapperField(
				this,
				5,
				this.#one_of_decls[0],
				value,
			);
		}
		get has_repl_identity() {
			return pb_1.Message.getField(this, 5) != null;
		}
		get Token() {
			const cases: {
				[index: number]: 'none' | 'repl_token' | 'repl_identity';
			} = {
				0: 'none',
				4: 'repl_token',
				5: 'repl_identity',
			};
			return cases[pb_1.Message.computeOneofCase(this, [4, 5])];
		}
		static fromObject(data: {
			iat?: ReturnType<
				typeof dependency_1.google.protobuf.Timestamp.prototype.toObject
			>;
			exp?: ReturnType<
				typeof dependency_1.google.protobuf.Timestamp.prototype.toObject
			>;
			replid?: string;
			repl_token?: ReturnType<
				typeof dependency_2.api.ReplToken.prototype.toObject
			>;
			repl_identity?: ReturnType<
				typeof GovalReplIdentity.prototype.toObject
			>;
		}): GovalToken {
			const message = new GovalToken({});
			if (data.iat != null) {
				message.iat = dependency_1.google.protobuf.Timestamp.fromObject(
					data.iat,
				);
			}
			if (data.exp != null) {
				message.exp = dependency_1.google.protobuf.Timestamp.fromObject(
					data.exp,
				);
			}
			if (data.replid != null) {
				message.replid = data.replid;
			}
			if (data.repl_token != null) {
				message.repl_token = dependency_2.api.ReplToken.fromObject(
					data.repl_token,
				);
			}
			if (data.repl_identity != null) {
				message.repl_identity = GovalReplIdentity.fromObject(
					data.repl_identity,
				);
			}
			return message;
		}
		toObject() {
			const data: {
				iat?: ReturnType<
					typeof dependency_1.google.protobuf.Timestamp.prototype.toObject
				>;
				exp?: ReturnType<
					typeof dependency_1.google.protobuf.Timestamp.prototype.toObject
				>;
				replid?: string;
				repl_token?: ReturnType<
					typeof dependency_2.api.ReplToken.prototype.toObject
				>;
				repl_identity?: ReturnType<
					typeof GovalReplIdentity.prototype.toObject
				>;
			} = {};
			if (this.iat != null) {
				data.iat = this.iat.toObject();
			}
			if (this.exp != null) {
				data.exp = this.exp.toObject();
			}
			if (this.replid != null) {
				data.replid = this.replid;
			}
			if (this.repl_token != null) {
				data.repl_token = this.repl_token.toObject();
			}
			if (this.repl_identity != null) {
				data.repl_identity = this.repl_identity.toObject();
			}
			return data;
		}
		serialize(): Uint8Array;
		serialize(w: pb_1.BinaryWriter): void;
		serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
			const writer = w || new pb_1.BinaryWriter();
			if (this.has_iat)
				writer.writeMessage(1, this.iat, () =>
					this.iat.serialize(writer),
				);
			if (this.has_exp)
				writer.writeMessage(2, this.exp, () =>
					this.exp.serialize(writer),
				);
			if (this.replid.length) writer.writeString(3, this.replid);
			if (this.has_repl_token)
				writer.writeMessage(4, this.repl_token, () =>
					this.repl_token.serialize(writer),
				);
			if (this.has_repl_identity)
				writer.writeMessage(5, this.repl_identity, () =>
					this.repl_identity.serialize(writer),
				);
			if (!w) return writer.getResultBuffer();
		}
		static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GovalToken {
			const reader =
					bytes instanceof pb_1.BinaryReader
						? bytes
						: new pb_1.BinaryReader(bytes),
				message = new GovalToken();
			while (reader.nextField()) {
				if (reader.isEndGroup()) break;
				switch (reader.getFieldNumber()) {
					case 1:
						reader.readMessage(
							message.iat,
							() =>
								(message.iat =
									dependency_1.google.protobuf.Timestamp.deserialize(
										reader,
									)),
						);
						break;
					case 2:
						reader.readMessage(
							message.exp,
							() =>
								(message.exp =
									dependency_1.google.protobuf.Timestamp.deserialize(
										reader,
									)),
						);
						break;
					case 3:
						message.replid = reader.readString();
						break;
					case 4:
						reader.readMessage(
							message.repl_token,
							() =>
								(message.repl_token =
									dependency_2.api.ReplToken.deserialize(
										reader,
									)),
						);
						break;
					case 5:
						reader.readMessage(
							message.repl_identity,
							() =>
								(message.repl_identity =
									GovalReplIdentity.deserialize(reader)),
						);
						break;
					default:
						reader.skipField();
				}
			}
			return message;
		}
		serializeBinary(): Uint8Array {
			return this.serialize();
		}
		static deserializeBinary(bytes: Uint8Array): GovalToken {
			return GovalToken.deserialize(bytes);
		}
	}
	export class GovalReplIdentity extends pb_1.Message {
		#one_of_decls: number[][] = [];
		constructor(
			data?:
				| any[]
				| {
						replid?: string;
						user?: string;
						slug?: string;
						aud?: string;
						ephemeral?: boolean;
						originReplid?: string;
				  },
		) {
			super();
			pb_1.Message.initialize(
				this,
				Array.isArray(data) ? data : [],
				0,
				-1,
				[],
				this.#one_of_decls,
			);
			if (!Array.isArray(data) && typeof data == 'object') {
				if ('replid' in data && data.replid != undefined) {
					this.replid = data.replid;
				}
				if ('user' in data && data.user != undefined) {
					this.user = data.user;
				}
				if ('slug' in data && data.slug != undefined) {
					this.slug = data.slug;
				}
				if ('aud' in data && data.aud != undefined) {
					this.aud = data.aud;
				}
				if ('ephemeral' in data && data.ephemeral != undefined) {
					this.ephemeral = data.ephemeral;
				}
				if ('originReplid' in data && data.originReplid != undefined) {
					this.originReplid = data.originReplid;
				}
			}
		}
		get replid() {
			return pb_1.Message.getFieldWithDefault(this, 1, '') as string;
		}
		set replid(value: string) {
			pb_1.Message.setField(this, 1, value);
		}
		get user() {
			return pb_1.Message.getFieldWithDefault(this, 2, '') as string;
		}
		set user(value: string) {
			pb_1.Message.setField(this, 2, value);
		}
		get slug() {
			return pb_1.Message.getFieldWithDefault(this, 3, '') as string;
		}
		set slug(value: string) {
			pb_1.Message.setField(this, 3, value);
		}
		get aud() {
			return pb_1.Message.getFieldWithDefault(this, 4, '') as string;
		}
		set aud(value: string) {
			pb_1.Message.setField(this, 4, value);
		}
		get ephemeral() {
			return pb_1.Message.getFieldWithDefault(this, 5, false) as boolean;
		}
		set ephemeral(value: boolean) {
			pb_1.Message.setField(this, 5, value);
		}
		get originReplid() {
			return pb_1.Message.getFieldWithDefault(this, 6, '') as string;
		}
		set originReplid(value: string) {
			pb_1.Message.setField(this, 6, value);
		}
		static fromObject(data: {
			replid?: string;
			user?: string;
			slug?: string;
			aud?: string;
			ephemeral?: boolean;
			originReplid?: string;
		}): GovalReplIdentity {
			const message = new GovalReplIdentity({});
			if (data.replid != null) {
				message.replid = data.replid;
			}
			if (data.user != null) {
				message.user = data.user;
			}
			if (data.slug != null) {
				message.slug = data.slug;
			}
			if (data.aud != null) {
				message.aud = data.aud;
			}
			if (data.ephemeral != null) {
				message.ephemeral = data.ephemeral;
			}
			if (data.originReplid != null) {
				message.originReplid = data.originReplid;
			}
			return message;
		}
		toObject() {
			const data: {
				replid?: string;
				user?: string;
				slug?: string;
				aud?: string;
				ephemeral?: boolean;
				originReplid?: string;
			} = {};
			if (this.replid != null) {
				data.replid = this.replid;
			}
			if (this.user != null) {
				data.user = this.user;
			}
			if (this.slug != null) {
				data.slug = this.slug;
			}
			if (this.aud != null) {
				data.aud = this.aud;
			}
			if (this.ephemeral != null) {
				data.ephemeral = this.ephemeral;
			}
			if (this.originReplid != null) {
				data.originReplid = this.originReplid;
			}
			return data;
		}
		serialize(): Uint8Array;
		serialize(w: pb_1.BinaryWriter): void;
		serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
			const writer = w || new pb_1.BinaryWriter();
			if (this.replid.length) writer.writeString(1, this.replid);
			if (this.user.length) writer.writeString(2, this.user);
			if (this.slug.length) writer.writeString(3, this.slug);
			if (this.aud.length) writer.writeString(4, this.aud);
			if (this.ephemeral != false) writer.writeBool(5, this.ephemeral);
			if (this.originReplid.length)
				writer.writeString(6, this.originReplid);
			if (!w) return writer.getResultBuffer();
		}
		static deserialize(
			bytes: Uint8Array | pb_1.BinaryReader,
		): GovalReplIdentity {
			const reader =
					bytes instanceof pb_1.BinaryReader
						? bytes
						: new pb_1.BinaryReader(bytes),
				message = new GovalReplIdentity();
			while (reader.nextField()) {
				if (reader.isEndGroup()) break;
				switch (reader.getFieldNumber()) {
					case 1:
						message.replid = reader.readString();
						break;
					case 2:
						message.user = reader.readString();
						break;
					case 3:
						message.slug = reader.readString();
						break;
					case 4:
						message.aud = reader.readString();
						break;
					case 5:
						message.ephemeral = reader.readBool();
						break;
					case 6:
						message.originReplid = reader.readString();
						break;
					default:
						reader.skipField();
				}
			}
			return message;
		}
		serializeBinary(): Uint8Array {
			return this.serialize();
		}
		static deserializeBinary(bytes: Uint8Array): GovalReplIdentity {
			return GovalReplIdentity.deserialize(bytes);
		}
	}
}
