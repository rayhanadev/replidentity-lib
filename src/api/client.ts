/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.20.1
 * source: client.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from './google/protobuf/timestamp';
import * as pb_1 from 'google-protobuf';
export namespace api {
	export class Repl extends pb_1.Message {
		#one_of_decls: number[][] = [];
		constructor(
			data?:
				| any[]
				| {
						id?: string;
						language?: string;
						bucket?: string;
						slug?: string;
						user?: string;
						sourceRepl?: string;
				  },
		) {
			super();
			pb_1.Message.initialize(
				this,
				Array.isArray(data) ? data : [],
				0,
				-1,
				[],
				this.#one_of_decls,
			);
			if (!Array.isArray(data) && typeof data == 'object') {
				if ('id' in data && data.id != undefined) {
					this.id = data.id;
				}
				if ('language' in data && data.language != undefined) {
					this.language = data.language;
				}
				if ('bucket' in data && data.bucket != undefined) {
					this.bucket = data.bucket;
				}
				if ('slug' in data && data.slug != undefined) {
					this.slug = data.slug;
				}
				if ('user' in data && data.user != undefined) {
					this.user = data.user;
				}
				if ('sourceRepl' in data && data.sourceRepl != undefined) {
					this.sourceRepl = data.sourceRepl;
				}
			}
		}
		get id() {
			return pb_1.Message.getFieldWithDefault(this, 1, '') as string;
		}
		set id(value: string) {
			pb_1.Message.setField(this, 1, value);
		}
		get language() {
			return pb_1.Message.getFieldWithDefault(this, 2, '') as string;
		}
		set language(value: string) {
			pb_1.Message.setField(this, 2, value);
		}
		get bucket() {
			return pb_1.Message.getFieldWithDefault(this, 3, '') as string;
		}
		set bucket(value: string) {
			pb_1.Message.setField(this, 3, value);
		}
		get slug() {
			return pb_1.Message.getFieldWithDefault(this, 4, '') as string;
		}
		set slug(value: string) {
			pb_1.Message.setField(this, 4, value);
		}
		get user() {
			return pb_1.Message.getFieldWithDefault(this, 5, '') as string;
		}
		set user(value: string) {
			pb_1.Message.setField(this, 5, value);
		}
		get sourceRepl() {
			return pb_1.Message.getFieldWithDefault(this, 6, '') as string;
		}
		set sourceRepl(value: string) {
			pb_1.Message.setField(this, 6, value);
		}
		static fromObject(data: {
			id?: string;
			language?: string;
			bucket?: string;
			slug?: string;
			user?: string;
			sourceRepl?: string;
		}): Repl {
			const message = new Repl({});
			if (data.id != null) {
				message.id = data.id;
			}
			if (data.language != null) {
				message.language = data.language;
			}
			if (data.bucket != null) {
				message.bucket = data.bucket;
			}
			if (data.slug != null) {
				message.slug = data.slug;
			}
			if (data.user != null) {
				message.user = data.user;
			}
			if (data.sourceRepl != null) {
				message.sourceRepl = data.sourceRepl;
			}
			return message;
		}
		toObject() {
			const data: {
				id?: string;
				language?: string;
				bucket?: string;
				slug?: string;
				user?: string;
				sourceRepl?: string;
			} = {};
			if (this.id != null) {
				data.id = this.id;
			}
			if (this.language != null) {
				data.language = this.language;
			}
			if (this.bucket != null) {
				data.bucket = this.bucket;
			}
			if (this.slug != null) {
				data.slug = this.slug;
			}
			if (this.user != null) {
				data.user = this.user;
			}
			if (this.sourceRepl != null) {
				data.sourceRepl = this.sourceRepl;
			}
			return data;
		}
		serialize(): Uint8Array;
		serialize(w: pb_1.BinaryWriter): void;
		serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
			const writer = w || new pb_1.BinaryWriter();
			if (this.id.length) writer.writeString(1, this.id);
			if (this.language.length) writer.writeString(2, this.language);
			if (this.bucket.length) writer.writeString(3, this.bucket);
			if (this.slug.length) writer.writeString(4, this.slug);
			if (this.user.length) writer.writeString(5, this.user);
			if (this.sourceRepl.length) writer.writeString(6, this.sourceRepl);
			if (!w) return writer.getResultBuffer();
		}
		static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Repl {
			const reader =
					bytes instanceof pb_1.BinaryReader
						? bytes
						: new pb_1.BinaryReader(bytes),
				message = new Repl();
			while (reader.nextField()) {
				if (reader.isEndGroup()) break;
				switch (reader.getFieldNumber()) {
					case 1:
						message.id = reader.readString();
						break;
					case 2:
						message.language = reader.readString();
						break;
					case 3:
						message.bucket = reader.readString();
						break;
					case 4:
						message.slug = reader.readString();
						break;
					case 5:
						message.user = reader.readString();
						break;
					case 6:
						message.sourceRepl = reader.readString();
						break;
					default:
						reader.skipField();
				}
			}
			return message;
		}
		serializeBinary(): Uint8Array {
			return this.serialize();
		}
		static deserializeBinary(bytes: Uint8Array): Repl {
			return Repl.deserialize(bytes);
		}
	}
	export class ResourceLimits extends pb_1.Message {
		#one_of_decls: number[][] = [];
		constructor(
			data?:
				| any[]
				| {
						net?: boolean;
						memory?: number;
						threads?: number;
						shares?: number;
						disk?: number;
						cache?: ResourceLimits.Cachability;
						restrictNetwork?: boolean;
				  },
		) {
			super();
			pb_1.Message.initialize(
				this,
				Array.isArray(data) ? data : [],
				0,
				-1,
				[],
				this.#one_of_decls,
			);
			if (!Array.isArray(data) && typeof data == 'object') {
				if ('net' in data && data.net != undefined) {
					this.net = data.net;
				}
				if ('memory' in data && data.memory != undefined) {
					this.memory = data.memory;
				}
				if ('threads' in data && data.threads != undefined) {
					this.threads = data.threads;
				}
				if ('shares' in data && data.shares != undefined) {
					this.shares = data.shares;
				}
				if ('disk' in data && data.disk != undefined) {
					this.disk = data.disk;
				}
				if ('cache' in data && data.cache != undefined) {
					this.cache = data.cache;
				}
				if (
					'restrictNetwork' in data &&
					data.restrictNetwork != undefined
				) {
					this.restrictNetwork = data.restrictNetwork;
				}
			}
		}
		get net() {
			return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
		}
		set net(value: boolean) {
			pb_1.Message.setField(this, 1, value);
		}
		get memory() {
			return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
		}
		set memory(value: number) {
			pb_1.Message.setField(this, 2, value);
		}
		get threads() {
			return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
		}
		set threads(value: number) {
			pb_1.Message.setField(this, 3, value);
		}
		get shares() {
			return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
		}
		set shares(value: number) {
			pb_1.Message.setField(this, 4, value);
		}
		get disk() {
			return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
		}
		set disk(value: number) {
			pb_1.Message.setField(this, 5, value);
		}
		get cache() {
			return pb_1.Message.getFieldWithDefault(
				this,
				6,
				ResourceLimits.Cachability.NONE,
			) as ResourceLimits.Cachability;
		}
		set cache(value: ResourceLimits.Cachability) {
			pb_1.Message.setField(this, 6, value);
		}
		get restrictNetwork() {
			return pb_1.Message.getFieldWithDefault(this, 7, false) as boolean;
		}
		set restrictNetwork(value: boolean) {
			pb_1.Message.setField(this, 7, value);
		}
		static fromObject(data: {
			net?: boolean;
			memory?: number;
			threads?: number;
			shares?: number;
			disk?: number;
			cache?: ResourceLimits.Cachability;
			restrictNetwork?: boolean;
		}): ResourceLimits {
			const message = new ResourceLimits({});
			if (data.net != null) {
				message.net = data.net;
			}
			if (data.memory != null) {
				message.memory = data.memory;
			}
			if (data.threads != null) {
				message.threads = data.threads;
			}
			if (data.shares != null) {
				message.shares = data.shares;
			}
			if (data.disk != null) {
				message.disk = data.disk;
			}
			if (data.cache != null) {
				message.cache = data.cache;
			}
			if (data.restrictNetwork != null) {
				message.restrictNetwork = data.restrictNetwork;
			}
			return message;
		}
		toObject() {
			const data: {
				net?: boolean;
				memory?: number;
				threads?: number;
				shares?: number;
				disk?: number;
				cache?: ResourceLimits.Cachability;
				restrictNetwork?: boolean;
			} = {};
			if (this.net != null) {
				data.net = this.net;
			}
			if (this.memory != null) {
				data.memory = this.memory;
			}
			if (this.threads != null) {
				data.threads = this.threads;
			}
			if (this.shares != null) {
				data.shares = this.shares;
			}
			if (this.disk != null) {
				data.disk = this.disk;
			}
			if (this.cache != null) {
				data.cache = this.cache;
			}
			if (this.restrictNetwork != null) {
				data.restrictNetwork = this.restrictNetwork;
			}
			return data;
		}
		serialize(): Uint8Array;
		serialize(w: pb_1.BinaryWriter): void;
		serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
			const writer = w || new pb_1.BinaryWriter();
			if (this.net != false) writer.writeBool(1, this.net);
			if (this.memory != 0) writer.writeInt64(2, this.memory);
			if (this.threads != 0) writer.writeDouble(3, this.threads);
			if (this.shares != 0) writer.writeDouble(4, this.shares);
			if (this.disk != 0) writer.writeInt64(5, this.disk);
			if (this.cache != ResourceLimits.Cachability.NONE)
				writer.writeEnum(6, this.cache);
			if (this.restrictNetwork != false)
				writer.writeBool(7, this.restrictNetwork);
			if (!w) return writer.getResultBuffer();
		}
		static deserialize(
			bytes: Uint8Array | pb_1.BinaryReader,
		): ResourceLimits {
			const reader =
					bytes instanceof pb_1.BinaryReader
						? bytes
						: new pb_1.BinaryReader(bytes),
				message = new ResourceLimits();
			while (reader.nextField()) {
				if (reader.isEndGroup()) break;
				switch (reader.getFieldNumber()) {
					case 1:
						message.net = reader.readBool();
						break;
					case 2:
						message.memory = reader.readInt64();
						break;
					case 3:
						message.threads = reader.readDouble();
						break;
					case 4:
						message.shares = reader.readDouble();
						break;
					case 5:
						message.disk = reader.readInt64();
						break;
					case 6:
						message.cache = reader.readEnum();
						break;
					case 7:
						message.restrictNetwork = reader.readBool();
						break;
					default:
						reader.skipField();
				}
			}
			return message;
		}
		serializeBinary(): Uint8Array {
			return this.serialize();
		}
		static deserializeBinary(bytes: Uint8Array): ResourceLimits {
			return ResourceLimits.deserialize(bytes);
		}
	}
	export namespace ResourceLimits {
		export enum Cachability {
			NONE = 0,
			USER = 1,
			REPL = 2,
		}
	}
	export class Permissions extends pb_1.Message {
		#one_of_decls: number[][] = [];
		constructor(
			data?:
				| any[]
				| {
						toggleAlwaysOn?: boolean;
				  },
		) {
			super();
			pb_1.Message.initialize(
				this,
				Array.isArray(data) ? data : [],
				0,
				-1,
				[],
				this.#one_of_decls,
			);
			if (!Array.isArray(data) && typeof data == 'object') {
				if (
					'toggleAlwaysOn' in data &&
					data.toggleAlwaysOn != undefined
				) {
					this.toggleAlwaysOn = data.toggleAlwaysOn;
				}
			}
		}
		get toggleAlwaysOn() {
			return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
		}
		set toggleAlwaysOn(value: boolean) {
			pb_1.Message.setField(this, 1, value);
		}
		static fromObject(data: { toggleAlwaysOn?: boolean }): Permissions {
			const message = new Permissions({});
			if (data.toggleAlwaysOn != null) {
				message.toggleAlwaysOn = data.toggleAlwaysOn;
			}
			return message;
		}
		toObject() {
			const data: {
				toggleAlwaysOn?: boolean;
			} = {};
			if (this.toggleAlwaysOn != null) {
				data.toggleAlwaysOn = this.toggleAlwaysOn;
			}
			return data;
		}
		serialize(): Uint8Array;
		serialize(w: pb_1.BinaryWriter): void;
		serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
			const writer = w || new pb_1.BinaryWriter();
			if (this.toggleAlwaysOn != false)
				writer.writeBool(1, this.toggleAlwaysOn);
			if (!w) return writer.getResultBuffer();
		}
		static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Permissions {
			const reader =
					bytes instanceof pb_1.BinaryReader
						? bytes
						: new pb_1.BinaryReader(bytes),
				message = new Permissions();
			while (reader.nextField()) {
				if (reader.isEndGroup()) break;
				switch (reader.getFieldNumber()) {
					case 1:
						message.toggleAlwaysOn = reader.readBool();
						break;
					default:
						reader.skipField();
				}
			}
			return message;
		}
		serializeBinary(): Uint8Array {
			return this.serialize();
		}
		static deserializeBinary(bytes: Uint8Array): Permissions {
			return Permissions.deserialize(bytes);
		}
	}
	export class ReplToken extends pb_1.Message {
		#one_of_decls: number[][] = [[7, 8, 9]];
		constructor(
			data?:
				| any[]
				| ({
						iat?: dependency_1.google.protobuf.Timestamp;
						exp?: dependency_1.google.protobuf.Timestamp;
						salt?: string;
						cluster?: string;
						persistence?: ReplToken.Persistence;
						resourceLimits?: ResourceLimits;
						format?: ReplToken.WireFormat;
						presenced?: ReplToken.Presenced;
						flags?: string[];
						permissions?: Permissions;
				  } & (
						| {
								repl?: Repl;
								id?: never;
								classroom?: never;
						  }
						| {
								repl?: never;
								id?: ReplToken.ReplID;
								classroom?: never;
						  }
						| {
								repl?: never;
								id?: never;
								/** @deprecated*/
								classroom?: ReplToken.ClassroomMetadata;
						  }
				  )),
		) {
			super();
			pb_1.Message.initialize(
				this,
				Array.isArray(data) ? data : [],
				0,
				-1,
				[14],
				this.#one_of_decls,
			);
			if (!Array.isArray(data) && typeof data == 'object') {
				if ('iat' in data && data.iat != undefined) {
					this.iat = data.iat;
				}
				if ('exp' in data && data.exp != undefined) {
					this.exp = data.exp;
				}
				if ('salt' in data && data.salt != undefined) {
					this.salt = data.salt;
				}
				if ('cluster' in data && data.cluster != undefined) {
					this.cluster = data.cluster;
				}
				if ('persistence' in data && data.persistence != undefined) {
					this.persistence = data.persistence;
				}
				if ('repl' in data && data.repl != undefined) {
					this.repl = data.repl;
				}
				if ('id' in data && data.id != undefined) {
					this.id = data.id;
				}
				if ('classroom' in data && data.classroom != undefined) {
					this.classroom = data.classroom;
				}
				if (
					'resourceLimits' in data &&
					data.resourceLimits != undefined
				) {
					this.resourceLimits = data.resourceLimits;
				}
				if ('format' in data && data.format != undefined) {
					this.format = data.format;
				}
				if ('presenced' in data && data.presenced != undefined) {
					this.presenced = data.presenced;
				}
				if ('flags' in data && data.flags != undefined) {
					this.flags = data.flags;
				}
				if ('permissions' in data && data.permissions != undefined) {
					this.permissions = data.permissions;
				}
			}
		}
		get iat() {
			return pb_1.Message.getWrapperField(
				this,
				dependency_1.google.protobuf.Timestamp,
				1,
			) as dependency_1.google.protobuf.Timestamp;
		}
		set iat(value: dependency_1.google.protobuf.Timestamp) {
			pb_1.Message.setWrapperField(this, 1, value);
		}
		get has_iat() {
			return pb_1.Message.getField(this, 1) != null;
		}
		get exp() {
			return pb_1.Message.getWrapperField(
				this,
				dependency_1.google.protobuf.Timestamp,
				2,
			) as dependency_1.google.protobuf.Timestamp;
		}
		set exp(value: dependency_1.google.protobuf.Timestamp) {
			pb_1.Message.setWrapperField(this, 2, value);
		}
		get has_exp() {
			return pb_1.Message.getField(this, 2) != null;
		}
		get salt() {
			return pb_1.Message.getFieldWithDefault(this, 3, '') as string;
		}
		set salt(value: string) {
			pb_1.Message.setField(this, 3, value);
		}
		get cluster() {
			return pb_1.Message.getFieldWithDefault(this, 4, '') as string;
		}
		set cluster(value: string) {
			pb_1.Message.setField(this, 4, value);
		}
		get persistence() {
			return pb_1.Message.getFieldWithDefault(
				this,
				6,
				ReplToken.Persistence.PERSISTENT,
			) as ReplToken.Persistence;
		}
		set persistence(value: ReplToken.Persistence) {
			pb_1.Message.setField(this, 6, value);
		}
		get repl() {
			return pb_1.Message.getWrapperField(this, Repl, 7) as Repl;
		}
		set repl(value: Repl) {
			pb_1.Message.setOneofWrapperField(
				this,
				7,
				this.#one_of_decls[0],
				value,
			);
		}
		get has_repl() {
			return pb_1.Message.getField(this, 7) != null;
		}
		get id() {
			return pb_1.Message.getWrapperField(
				this,
				ReplToken.ReplID,
				8,
			) as ReplToken.ReplID;
		}
		set id(value: ReplToken.ReplID) {
			pb_1.Message.setOneofWrapperField(
				this,
				8,
				this.#one_of_decls[0],
				value,
			);
		}
		get has_id() {
			return pb_1.Message.getField(this, 8) != null;
		}
		/** @deprecated*/
		get classroom() {
			return pb_1.Message.getWrapperField(
				this,
				ReplToken.ClassroomMetadata,
				9,
			) as ReplToken.ClassroomMetadata;
		}
		/** @deprecated*/
		set classroom(value: ReplToken.ClassroomMetadata) {
			pb_1.Message.setOneofWrapperField(
				this,
				9,
				this.#one_of_decls[0],
				value,
			);
		}
		/** @deprecated*/
		get has_classroom() {
			return pb_1.Message.getField(this, 9) != null;
		}
		get resourceLimits() {
			return pb_1.Message.getWrapperField(
				this,
				ResourceLimits,
				10,
			) as ResourceLimits;
		}
		set resourceLimits(value: ResourceLimits) {
			pb_1.Message.setWrapperField(this, 10, value);
		}
		get has_resourceLimits() {
			return pb_1.Message.getField(this, 10) != null;
		}
		get format() {
			return pb_1.Message.getFieldWithDefault(
				this,
				12,
				ReplToken.WireFormat.PROTOBUF,
			) as ReplToken.WireFormat;
		}
		set format(value: ReplToken.WireFormat) {
			pb_1.Message.setField(this, 12, value);
		}
		get presenced() {
			return pb_1.Message.getWrapperField(
				this,
				ReplToken.Presenced,
				13,
			) as ReplToken.Presenced;
		}
		set presenced(value: ReplToken.Presenced) {
			pb_1.Message.setWrapperField(this, 13, value);
		}
		get has_presenced() {
			return pb_1.Message.getField(this, 13) != null;
		}
		get flags() {
			return pb_1.Message.getFieldWithDefault(this, 14, []) as string[];
		}
		set flags(value: string[]) {
			pb_1.Message.setField(this, 14, value);
		}
		get permissions() {
			return pb_1.Message.getWrapperField(
				this,
				Permissions,
				15,
			) as Permissions;
		}
		set permissions(value: Permissions) {
			pb_1.Message.setWrapperField(this, 15, value);
		}
		get has_permissions() {
			return pb_1.Message.getField(this, 15) != null;
		}
		get metadata() {
			const cases: {
				[index: number]: 'none' | 'repl' | 'id' | 'classroom';
			} = {
				0: 'none',
				7: 'repl',
				8: 'id',
				9: 'classroom',
			};
			return cases[pb_1.Message.computeOneofCase(this, [7, 8, 9])];
		}
		static fromObject(data: {
			iat?: ReturnType<
				typeof dependency_1.google.protobuf.Timestamp.prototype.toObject
			>;
			exp?: ReturnType<
				typeof dependency_1.google.protobuf.Timestamp.prototype.toObject
			>;
			salt?: string;
			cluster?: string;
			persistence?: ReplToken.Persistence;
			repl?: ReturnType<typeof Repl.prototype.toObject>;
			id?: ReturnType<typeof ReplToken.ReplID.prototype.toObject>;
			classroom?: ReturnType<
				typeof ReplToken.ClassroomMetadata.prototype.toObject
			>;
			resourceLimits?: ReturnType<
				typeof ResourceLimits.prototype.toObject
			>;
			format?: ReplToken.WireFormat;
			presenced?: ReturnType<
				typeof ReplToken.Presenced.prototype.toObject
			>;
			flags?: string[];
			permissions?: ReturnType<typeof Permissions.prototype.toObject>;
		}): ReplToken {
			const message = new ReplToken({});
			if (data.iat != null) {
				message.iat = dependency_1.google.protobuf.Timestamp.fromObject(
					data.iat,
				);
			}
			if (data.exp != null) {
				message.exp = dependency_1.google.protobuf.Timestamp.fromObject(
					data.exp,
				);
			}
			if (data.salt != null) {
				message.salt = data.salt;
			}
			if (data.cluster != null) {
				message.cluster = data.cluster;
			}
			if (data.persistence != null) {
				message.persistence = data.persistence;
			}
			if (data.repl != null) {
				message.repl = Repl.fromObject(data.repl);
			}
			if (data.id != null) {
				message.id = ReplToken.ReplID.fromObject(data.id);
			}
			if (data.classroom != null) {
				message.classroom = ReplToken.ClassroomMetadata.fromObject(
					data.classroom,
				);
			}
			if (data.resourceLimits != null) {
				message.resourceLimits = ResourceLimits.fromObject(
					data.resourceLimits,
				);
			}
			if (data.format != null) {
				message.format = data.format;
			}
			if (data.presenced != null) {
				message.presenced = ReplToken.Presenced.fromObject(
					data.presenced,
				);
			}
			if (data.flags != null) {
				message.flags = data.flags;
			}
			if (data.permissions != null) {
				message.permissions = Permissions.fromObject(data.permissions);
			}
			return message;
		}
		toObject() {
			const data: {
				iat?: ReturnType<
					typeof dependency_1.google.protobuf.Timestamp.prototype.toObject
				>;
				exp?: ReturnType<
					typeof dependency_1.google.protobuf.Timestamp.prototype.toObject
				>;
				salt?: string;
				cluster?: string;
				persistence?: ReplToken.Persistence;
				repl?: ReturnType<typeof Repl.prototype.toObject>;
				id?: ReturnType<typeof ReplToken.ReplID.prototype.toObject>;
				classroom?: ReturnType<
					typeof ReplToken.ClassroomMetadata.prototype.toObject
				>;
				resourceLimits?: ReturnType<
					typeof ResourceLimits.prototype.toObject
				>;
				format?: ReplToken.WireFormat;
				presenced?: ReturnType<
					typeof ReplToken.Presenced.prototype.toObject
				>;
				flags?: string[];
				permissions?: ReturnType<typeof Permissions.prototype.toObject>;
			} = {};
			if (this.iat != null) {
				data.iat = this.iat.toObject();
			}
			if (this.exp != null) {
				data.exp = this.exp.toObject();
			}
			if (this.salt != null) {
				data.salt = this.salt;
			}
			if (this.cluster != null) {
				data.cluster = this.cluster;
			}
			if (this.persistence != null) {
				data.persistence = this.persistence;
			}
			if (this.repl != null) {
				data.repl = this.repl.toObject();
			}
			if (this.id != null) {
				data.id = this.id.toObject();
			}
			if (this.classroom != null) {
				data.classroom = this.classroom.toObject();
			}
			if (this.resourceLimits != null) {
				data.resourceLimits = this.resourceLimits.toObject();
			}
			if (this.format != null) {
				data.format = this.format;
			}
			if (this.presenced != null) {
				data.presenced = this.presenced.toObject();
			}
			if (this.flags != null) {
				data.flags = this.flags;
			}
			if (this.permissions != null) {
				data.permissions = this.permissions.toObject();
			}
			return data;
		}
		serialize(): Uint8Array;
		serialize(w: pb_1.BinaryWriter): void;
		serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
			const writer = w || new pb_1.BinaryWriter();
			if (this.has_iat)
				writer.writeMessage(1, this.iat, () =>
					this.iat.serialize(writer),
				);
			if (this.has_exp)
				writer.writeMessage(2, this.exp, () =>
					this.exp.serialize(writer),
				);
			if (this.salt.length) writer.writeString(3, this.salt);
			if (this.cluster.length) writer.writeString(4, this.cluster);
			if (this.persistence != ReplToken.Persistence.PERSISTENT)
				writer.writeEnum(6, this.persistence);
			if (this.has_repl)
				writer.writeMessage(7, this.repl, () =>
					this.repl.serialize(writer),
				);
			if (this.has_id)
				writer.writeMessage(8, this.id, () =>
					this.id.serialize(writer),
				);
			if (this.has_classroom)
				writer.writeMessage(9, this.classroom, () =>
					this.classroom.serialize(writer),
				);
			if (this.has_resourceLimits)
				writer.writeMessage(10, this.resourceLimits, () =>
					this.resourceLimits.serialize(writer),
				);
			if (this.format != ReplToken.WireFormat.PROTOBUF)
				writer.writeEnum(12, this.format);
			if (this.has_presenced)
				writer.writeMessage(13, this.presenced, () =>
					this.presenced.serialize(writer),
				);
			if (this.flags.length) writer.writeRepeatedString(14, this.flags);
			if (this.has_permissions)
				writer.writeMessage(15, this.permissions, () =>
					this.permissions.serialize(writer),
				);
			if (!w) return writer.getResultBuffer();
		}
		static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ReplToken {
			const reader =
					bytes instanceof pb_1.BinaryReader
						? bytes
						: new pb_1.BinaryReader(bytes),
				message = new ReplToken();
			while (reader.nextField()) {
				if (reader.isEndGroup()) break;
				switch (reader.getFieldNumber()) {
					case 1:
						reader.readMessage(
							message.iat,
							() =>
								(message.iat =
									dependency_1.google.protobuf.Timestamp.deserialize(
										reader,
									)),
						);
						break;
					case 2:
						reader.readMessage(
							message.exp,
							() =>
								(message.exp =
									dependency_1.google.protobuf.Timestamp.deserialize(
										reader,
									)),
						);
						break;
					case 3:
						message.salt = reader.readString();
						break;
					case 4:
						message.cluster = reader.readString();
						break;
					case 6:
						message.persistence = reader.readEnum();
						break;
					case 7:
						reader.readMessage(
							message.repl,
							() => (message.repl = Repl.deserialize(reader)),
						);
						break;
					case 8:
						reader.readMessage(
							message.id,
							() =>
								(message.id =
									ReplToken.ReplID.deserialize(reader)),
						);
						break;
					case 9:
						reader.readMessage(
							message.classroom,
							() =>
								(message.classroom =
									ReplToken.ClassroomMetadata.deserialize(
										reader,
									)),
						);
						break;
					case 10:
						reader.readMessage(
							message.resourceLimits,
							() =>
								(message.resourceLimits =
									ResourceLimits.deserialize(reader)),
						);
						break;
					case 12:
						message.format = reader.readEnum();
						break;
					case 13:
						reader.readMessage(
							message.presenced,
							() =>
								(message.presenced =
									ReplToken.Presenced.deserialize(reader)),
						);
						break;
					case 14:
						pb_1.Message.addToRepeatedField(
							message,
							14,
							reader.readString(),
						);
						break;
					case 15:
						reader.readMessage(
							message.permissions,
							() =>
								(message.permissions =
									Permissions.deserialize(reader)),
						);
						break;
					default:
						reader.skipField();
				}
			}
			return message;
		}
		serializeBinary(): Uint8Array {
			return this.serialize();
		}
		static deserializeBinary(bytes: Uint8Array): ReplToken {
			return ReplToken.deserialize(bytes);
		}
	}
	export namespace ReplToken {
		export enum Persistence {
			PERSISTENT = 0,
			EPHEMERAL = 1,
			NONE = 2,
		}
		export enum WireFormat {
			PROTOBUF = 0,
			/** @deprecated*/
			JSON = 1,
		}
		export class ClassroomMetadata extends pb_1.Message {
			#one_of_decls: number[][] = [];
			constructor(
				data?:
					| any[]
					| {
							id?: string;
							language?: string;
					  },
			) {
				super();
				pb_1.Message.initialize(
					this,
					Array.isArray(data) ? data : [],
					0,
					-1,
					[],
					this.#one_of_decls,
				);
				if (!Array.isArray(data) && typeof data == 'object') {
					if ('id' in data && data.id != undefined) {
						this.id = data.id;
					}
					if ('language' in data && data.language != undefined) {
						this.language = data.language;
					}
				}
			}
			get id() {
				return pb_1.Message.getFieldWithDefault(this, 1, '') as string;
			}
			set id(value: string) {
				pb_1.Message.setField(this, 1, value);
			}
			get language() {
				return pb_1.Message.getFieldWithDefault(this, 2, '') as string;
			}
			set language(value: string) {
				pb_1.Message.setField(this, 2, value);
			}
			static fromObject(data: {
				id?: string;
				language?: string;
			}): ClassroomMetadata {
				const message = new ClassroomMetadata({});
				if (data.id != null) {
					message.id = data.id;
				}
				if (data.language != null) {
					message.language = data.language;
				}
				return message;
			}
			toObject() {
				const data: {
					id?: string;
					language?: string;
				} = {};
				if (this.id != null) {
					data.id = this.id;
				}
				if (this.language != null) {
					data.language = this.language;
				}
				return data;
			}
			serialize(): Uint8Array;
			serialize(w: pb_1.BinaryWriter): void;
			serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
				const writer = w || new pb_1.BinaryWriter();
				if (this.id.length) writer.writeString(1, this.id);
				if (this.language.length) writer.writeString(2, this.language);
				if (!w) return writer.getResultBuffer();
			}
			static deserialize(
				bytes: Uint8Array | pb_1.BinaryReader,
			): ClassroomMetadata {
				const reader =
						bytes instanceof pb_1.BinaryReader
							? bytes
							: new pb_1.BinaryReader(bytes),
					message = new ClassroomMetadata();
				while (reader.nextField()) {
					if (reader.isEndGroup()) break;
					switch (reader.getFieldNumber()) {
						case 1:
							message.id = reader.readString();
							break;
						case 2:
							message.language = reader.readString();
							break;
						default:
							reader.skipField();
					}
				}
				return message;
			}
			serializeBinary(): Uint8Array {
				return this.serialize();
			}
			static deserializeBinary(bytes: Uint8Array): ClassroomMetadata {
				return ClassroomMetadata.deserialize(bytes);
			}
		}
		export class ReplID extends pb_1.Message {
			#one_of_decls: number[][] = [];
			constructor(
				data?:
					| any[]
					| {
							id?: string;
							sourceRepl?: string;
					  },
			) {
				super();
				pb_1.Message.initialize(
					this,
					Array.isArray(data) ? data : [],
					0,
					-1,
					[],
					this.#one_of_decls,
				);
				if (!Array.isArray(data) && typeof data == 'object') {
					if ('id' in data && data.id != undefined) {
						this.id = data.id;
					}
					if ('sourceRepl' in data && data.sourceRepl != undefined) {
						this.sourceRepl = data.sourceRepl;
					}
				}
			}
			get id() {
				return pb_1.Message.getFieldWithDefault(this, 1, '') as string;
			}
			set id(value: string) {
				pb_1.Message.setField(this, 1, value);
			}
			get sourceRepl() {
				return pb_1.Message.getFieldWithDefault(this, 2, '') as string;
			}
			set sourceRepl(value: string) {
				pb_1.Message.setField(this, 2, value);
			}
			static fromObject(data: {
				id?: string;
				sourceRepl?: string;
			}): ReplID {
				const message = new ReplID({});
				if (data.id != null) {
					message.id = data.id;
				}
				if (data.sourceRepl != null) {
					message.sourceRepl = data.sourceRepl;
				}
				return message;
			}
			toObject() {
				const data: {
					id?: string;
					sourceRepl?: string;
				} = {};
				if (this.id != null) {
					data.id = this.id;
				}
				if (this.sourceRepl != null) {
					data.sourceRepl = this.sourceRepl;
				}
				return data;
			}
			serialize(): Uint8Array;
			serialize(w: pb_1.BinaryWriter): void;
			serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
				const writer = w || new pb_1.BinaryWriter();
				if (this.id.length) writer.writeString(1, this.id);
				if (this.sourceRepl.length)
					writer.writeString(2, this.sourceRepl);
				if (!w) return writer.getResultBuffer();
			}
			static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ReplID {
				const reader =
						bytes instanceof pb_1.BinaryReader
							? bytes
							: new pb_1.BinaryReader(bytes),
					message = new ReplID();
				while (reader.nextField()) {
					if (reader.isEndGroup()) break;
					switch (reader.getFieldNumber()) {
						case 1:
							message.id = reader.readString();
							break;
						case 2:
							message.sourceRepl = reader.readString();
							break;
						default:
							reader.skipField();
					}
				}
				return message;
			}
			serializeBinary(): Uint8Array {
				return this.serialize();
			}
			static deserializeBinary(bytes: Uint8Array): ReplID {
				return ReplID.deserialize(bytes);
			}
		}
		export class Presenced extends pb_1.Message {
			#one_of_decls: number[][] = [];
			constructor(
				data?:
					| any[]
					| {
							bearerID?: number;
							bearerName?: string;
					  },
			) {
				super();
				pb_1.Message.initialize(
					this,
					Array.isArray(data) ? data : [],
					0,
					-1,
					[],
					this.#one_of_decls,
				);
				if (!Array.isArray(data) && typeof data == 'object') {
					if ('bearerID' in data && data.bearerID != undefined) {
						this.bearerID = data.bearerID;
					}
					if ('bearerName' in data && data.bearerName != undefined) {
						this.bearerName = data.bearerName;
					}
				}
			}
			get bearerID() {
				return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
			}
			set bearerID(value: number) {
				pb_1.Message.setField(this, 1, value);
			}
			get bearerName() {
				return pb_1.Message.getFieldWithDefault(this, 2, '') as string;
			}
			set bearerName(value: string) {
				pb_1.Message.setField(this, 2, value);
			}
			static fromObject(data: {
				bearerID?: number;
				bearerName?: string;
			}): Presenced {
				const message = new Presenced({});
				if (data.bearerID != null) {
					message.bearerID = data.bearerID;
				}
				if (data.bearerName != null) {
					message.bearerName = data.bearerName;
				}
				return message;
			}
			toObject() {
				const data: {
					bearerID?: number;
					bearerName?: string;
				} = {};
				if (this.bearerID != null) {
					data.bearerID = this.bearerID;
				}
				if (this.bearerName != null) {
					data.bearerName = this.bearerName;
				}
				return data;
			}
			serialize(): Uint8Array;
			serialize(w: pb_1.BinaryWriter): void;
			serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
				const writer = w || new pb_1.BinaryWriter();
				if (this.bearerID != 0) writer.writeUint32(1, this.bearerID);
				if (this.bearerName.length)
					writer.writeString(2, this.bearerName);
				if (!w) return writer.getResultBuffer();
			}
			static deserialize(
				bytes: Uint8Array | pb_1.BinaryReader,
			): Presenced {
				const reader =
						bytes instanceof pb_1.BinaryReader
							? bytes
							: new pb_1.BinaryReader(bytes),
					message = new Presenced();
				while (reader.nextField()) {
					if (reader.isEndGroup()) break;
					switch (reader.getFieldNumber()) {
						case 1:
							message.bearerID = reader.readUint32();
							break;
						case 2:
							message.bearerName = reader.readString();
							break;
						default:
							reader.skipField();
					}
				}
				return message;
			}
			serializeBinary(): Uint8Array {
				return this.serialize();
			}
			static deserializeBinary(bytes: Uint8Array): Presenced {
				return Presenced.deserialize(bytes);
			}
		}
	}
	export class TLSCertificate extends pb_1.Message {
		#one_of_decls: number[][] = [];
		constructor(
			data?:
				| any[]
				| {
						domain?: string;
						cert?: Uint8Array;
				  },
		) {
			super();
			pb_1.Message.initialize(
				this,
				Array.isArray(data) ? data : [],
				0,
				-1,
				[],
				this.#one_of_decls,
			);
			if (!Array.isArray(data) && typeof data == 'object') {
				if ('domain' in data && data.domain != undefined) {
					this.domain = data.domain;
				}
				if ('cert' in data && data.cert != undefined) {
					this.cert = data.cert;
				}
			}
		}
		get domain() {
			return pb_1.Message.getFieldWithDefault(this, 1, '') as string;
		}
		set domain(value: string) {
			pb_1.Message.setField(this, 1, value);
		}
		get cert() {
			return pb_1.Message.getFieldWithDefault(
				this,
				2,
				new Uint8Array(),
			) as Uint8Array;
		}
		set cert(value: Uint8Array) {
			pb_1.Message.setField(this, 2, value);
		}
		static fromObject(data: {
			domain?: string;
			cert?: Uint8Array;
		}): TLSCertificate {
			const message = new TLSCertificate({});
			if (data.domain != null) {
				message.domain = data.domain;
			}
			if (data.cert != null) {
				message.cert = data.cert;
			}
			return message;
		}
		toObject() {
			const data: {
				domain?: string;
				cert?: Uint8Array;
			} = {};
			if (this.domain != null) {
				data.domain = this.domain;
			}
			if (this.cert != null) {
				data.cert = this.cert;
			}
			return data;
		}
		serialize(): Uint8Array;
		serialize(w: pb_1.BinaryWriter): void;
		serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
			const writer = w || new pb_1.BinaryWriter();
			if (this.domain.length) writer.writeString(1, this.domain);
			if (this.cert.length) writer.writeBytes(2, this.cert);
			if (!w) return writer.getResultBuffer();
		}
		static deserialize(
			bytes: Uint8Array | pb_1.BinaryReader,
		): TLSCertificate {
			const reader =
					bytes instanceof pb_1.BinaryReader
						? bytes
						: new pb_1.BinaryReader(bytes),
				message = new TLSCertificate();
			while (reader.nextField()) {
				if (reader.isEndGroup()) break;
				switch (reader.getFieldNumber()) {
					case 1:
						message.domain = reader.readString();
						break;
					case 2:
						message.cert = reader.readBytes();
						break;
					default:
						reader.skipField();
				}
			}
			return message;
		}
		serializeBinary(): Uint8Array {
			return this.serialize();
		}
		static deserializeBinary(bytes: Uint8Array): TLSCertificate {
			return TLSCertificate.deserialize(bytes);
		}
	}
	export class ReplTransfer extends pb_1.Message {
		#one_of_decls: number[][] = [];
		constructor(
			data?:
				| any[]
				| {
						repl?: Repl;
						replLimits?: ResourceLimits;
						userLimits?: ResourceLimits;
						customDomains?: string[];
						certificates?: TLSCertificate[];
						flags?: string[];
				  },
		) {
			super();
			pb_1.Message.initialize(
				this,
				Array.isArray(data) ? data : [],
				0,
				-1,
				[4, 5, 6],
				this.#one_of_decls,
			);
			if (!Array.isArray(data) && typeof data == 'object') {
				if ('repl' in data && data.repl != undefined) {
					this.repl = data.repl;
				}
				if ('replLimits' in data && data.replLimits != undefined) {
					this.replLimits = data.replLimits;
				}
				if ('userLimits' in data && data.userLimits != undefined) {
					this.userLimits = data.userLimits;
				}
				if (
					'customDomains' in data &&
					data.customDomains != undefined
				) {
					this.customDomains = data.customDomains;
				}
				if ('certificates' in data && data.certificates != undefined) {
					this.certificates = data.certificates;
				}
				if ('flags' in data && data.flags != undefined) {
					this.flags = data.flags;
				}
			}
		}
		get repl() {
			return pb_1.Message.getWrapperField(this, Repl, 1) as Repl;
		}
		set repl(value: Repl) {
			pb_1.Message.setWrapperField(this, 1, value);
		}
		get has_repl() {
			return pb_1.Message.getField(this, 1) != null;
		}
		get replLimits() {
			return pb_1.Message.getWrapperField(
				this,
				ResourceLimits,
				2,
			) as ResourceLimits;
		}
		set replLimits(value: ResourceLimits) {
			pb_1.Message.setWrapperField(this, 2, value);
		}
		get has_replLimits() {
			return pb_1.Message.getField(this, 2) != null;
		}
		get userLimits() {
			return pb_1.Message.getWrapperField(
				this,
				ResourceLimits,
				3,
			) as ResourceLimits;
		}
		set userLimits(value: ResourceLimits) {
			pb_1.Message.setWrapperField(this, 3, value);
		}
		get has_userLimits() {
			return pb_1.Message.getField(this, 3) != null;
		}
		get customDomains() {
			return pb_1.Message.getFieldWithDefault(this, 4, []) as string[];
		}
		set customDomains(value: string[]) {
			pb_1.Message.setField(this, 4, value);
		}
		get certificates() {
			return pb_1.Message.getRepeatedWrapperField(
				this,
				TLSCertificate,
				5,
			) as TLSCertificate[];
		}
		set certificates(value: TLSCertificate[]) {
			pb_1.Message.setRepeatedWrapperField(this, 5, value);
		}
		get flags() {
			return pb_1.Message.getFieldWithDefault(this, 6, []) as string[];
		}
		set flags(value: string[]) {
			pb_1.Message.setField(this, 6, value);
		}
		static fromObject(data: {
			repl?: ReturnType<typeof Repl.prototype.toObject>;
			replLimits?: ReturnType<typeof ResourceLimits.prototype.toObject>;
			userLimits?: ReturnType<typeof ResourceLimits.prototype.toObject>;
			customDomains?: string[];
			certificates?: ReturnType<
				typeof TLSCertificate.prototype.toObject
			>[];
			flags?: string[];
		}): ReplTransfer {
			const message = new ReplTransfer({});
			if (data.repl != null) {
				message.repl = Repl.fromObject(data.repl);
			}
			if (data.replLimits != null) {
				message.replLimits = ResourceLimits.fromObject(data.replLimits);
			}
			if (data.userLimits != null) {
				message.userLimits = ResourceLimits.fromObject(data.userLimits);
			}
			if (data.customDomains != null) {
				message.customDomains = data.customDomains;
			}
			if (data.certificates != null) {
				message.certificates = data.certificates.map((item) =>
					TLSCertificate.fromObject(item),
				);
			}
			if (data.flags != null) {
				message.flags = data.flags;
			}
			return message;
		}
		toObject() {
			const data: {
				repl?: ReturnType<typeof Repl.prototype.toObject>;
				replLimits?: ReturnType<
					typeof ResourceLimits.prototype.toObject
				>;
				userLimits?: ReturnType<
					typeof ResourceLimits.prototype.toObject
				>;
				customDomains?: string[];
				certificates?: ReturnType<
					typeof TLSCertificate.prototype.toObject
				>[];
				flags?: string[];
			} = {};
			if (this.repl != null) {
				data.repl = this.repl.toObject();
			}
			if (this.replLimits != null) {
				data.replLimits = this.replLimits.toObject();
			}
			if (this.userLimits != null) {
				data.userLimits = this.userLimits.toObject();
			}
			if (this.customDomains != null) {
				data.customDomains = this.customDomains;
			}
			if (this.certificates != null) {
				data.certificates = this.certificates.map(
					(item: TLSCertificate) => item.toObject(),
				);
			}
			if (this.flags != null) {
				data.flags = this.flags;
			}
			return data;
		}
		serialize(): Uint8Array;
		serialize(w: pb_1.BinaryWriter): void;
		serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
			const writer = w || new pb_1.BinaryWriter();
			if (this.has_repl)
				writer.writeMessage(1, this.repl, () =>
					this.repl.serialize(writer),
				);
			if (this.has_replLimits)
				writer.writeMessage(2, this.replLimits, () =>
					this.replLimits.serialize(writer),
				);
			if (this.has_userLimits)
				writer.writeMessage(3, this.userLimits, () =>
					this.userLimits.serialize(writer),
				);
			if (this.customDomains.length)
				writer.writeRepeatedString(4, this.customDomains);
			if (this.certificates.length)
				writer.writeRepeatedMessage(
					5,
					this.certificates,
					(item: TLSCertificate) => item.serialize(writer),
				);
			if (this.flags.length) writer.writeRepeatedString(6, this.flags);
			if (!w) return writer.getResultBuffer();
		}
		static deserialize(
			bytes: Uint8Array | pb_1.BinaryReader,
		): ReplTransfer {
			const reader =
					bytes instanceof pb_1.BinaryReader
						? bytes
						: new pb_1.BinaryReader(bytes),
				message = new ReplTransfer();
			while (reader.nextField()) {
				if (reader.isEndGroup()) break;
				switch (reader.getFieldNumber()) {
					case 1:
						reader.readMessage(
							message.repl,
							() => (message.repl = Repl.deserialize(reader)),
						);
						break;
					case 2:
						reader.readMessage(
							message.replLimits,
							() =>
								(message.replLimits =
									ResourceLimits.deserialize(reader)),
						);
						break;
					case 3:
						reader.readMessage(
							message.userLimits,
							() =>
								(message.userLimits =
									ResourceLimits.deserialize(reader)),
						);
						break;
					case 4:
						pb_1.Message.addToRepeatedField(
							message,
							4,
							reader.readString(),
						);
						break;
					case 5:
						reader.readMessage(message.certificates, () =>
							pb_1.Message.addToRepeatedWrapperField(
								message,
								5,
								TLSCertificate.deserialize(reader),
								TLSCertificate,
							),
						);
						break;
					case 6:
						pb_1.Message.addToRepeatedField(
							message,
							6,
							reader.readString(),
						);
						break;
					default:
						reader.skipField();
				}
			}
			return message;
		}
		serializeBinary(): Uint8Array {
			return this.serialize();
		}
		static deserializeBinary(bytes: Uint8Array): ReplTransfer {
			return ReplTransfer.deserialize(bytes);
		}
	}
	export class AllowReplRequest extends pb_1.Message {
		#one_of_decls: number[][] = [];
		constructor(
			data?:
				| any[]
				| {
						replTransfer?: ReplTransfer;
				  },
		) {
			super();
			pb_1.Message.initialize(
				this,
				Array.isArray(data) ? data : [],
				0,
				-1,
				[],
				this.#one_of_decls,
			);
			if (!Array.isArray(data) && typeof data == 'object') {
				if ('replTransfer' in data && data.replTransfer != undefined) {
					this.replTransfer = data.replTransfer;
				}
			}
		}
		get replTransfer() {
			return pb_1.Message.getWrapperField(
				this,
				ReplTransfer,
				1,
			) as ReplTransfer;
		}
		set replTransfer(value: ReplTransfer) {
			pb_1.Message.setWrapperField(this, 1, value);
		}
		get has_replTransfer() {
			return pb_1.Message.getField(this, 1) != null;
		}
		static fromObject(data: {
			replTransfer?: ReturnType<typeof ReplTransfer.prototype.toObject>;
		}): AllowReplRequest {
			const message = new AllowReplRequest({});
			if (data.replTransfer != null) {
				message.replTransfer = ReplTransfer.fromObject(
					data.replTransfer,
				);
			}
			return message;
		}
		toObject() {
			const data: {
				replTransfer?: ReturnType<
					typeof ReplTransfer.prototype.toObject
				>;
			} = {};
			if (this.replTransfer != null) {
				data.replTransfer = this.replTransfer.toObject();
			}
			return data;
		}
		serialize(): Uint8Array;
		serialize(w: pb_1.BinaryWriter): void;
		serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
			const writer = w || new pb_1.BinaryWriter();
			if (this.has_replTransfer)
				writer.writeMessage(1, this.replTransfer, () =>
					this.replTransfer.serialize(writer),
				);
			if (!w) return writer.getResultBuffer();
		}
		static deserialize(
			bytes: Uint8Array | pb_1.BinaryReader,
		): AllowReplRequest {
			const reader =
					bytes instanceof pb_1.BinaryReader
						? bytes
						: new pb_1.BinaryReader(bytes),
				message = new AllowReplRequest();
			while (reader.nextField()) {
				if (reader.isEndGroup()) break;
				switch (reader.getFieldNumber()) {
					case 1:
						reader.readMessage(
							message.replTransfer,
							() =>
								(message.replTransfer =
									ReplTransfer.deserialize(reader)),
						);
						break;
					default:
						reader.skipField();
				}
			}
			return message;
		}
		serializeBinary(): Uint8Array {
			return this.serialize();
		}
		static deserializeBinary(bytes: Uint8Array): AllowReplRequest {
			return AllowReplRequest.deserialize(bytes);
		}
	}
	export class ClusterMetadata extends pb_1.Message {
		#one_of_decls: number[][] = [];
		constructor(
			data?:
				| any[]
				| {
						id?: string;
						conmanURL?: string;
						gurl?: string;
						proxy?: string;
				  },
		) {
			super();
			pb_1.Message.initialize(
				this,
				Array.isArray(data) ? data : [],
				0,
				-1,
				[],
				this.#one_of_decls,
			);
			if (!Array.isArray(data) && typeof data == 'object') {
				if ('id' in data && data.id != undefined) {
					this.id = data.id;
				}
				if ('conmanURL' in data && data.conmanURL != undefined) {
					this.conmanURL = data.conmanURL;
				}
				if ('gurl' in data && data.gurl != undefined) {
					this.gurl = data.gurl;
				}
				if ('proxy' in data && data.proxy != undefined) {
					this.proxy = data.proxy;
				}
			}
		}
		get id() {
			return pb_1.Message.getFieldWithDefault(this, 1, '') as string;
		}
		set id(value: string) {
			pb_1.Message.setField(this, 1, value);
		}
		get conmanURL() {
			return pb_1.Message.getFieldWithDefault(this, 2, '') as string;
		}
		set conmanURL(value: string) {
			pb_1.Message.setField(this, 2, value);
		}
		get gurl() {
			return pb_1.Message.getFieldWithDefault(this, 3, '') as string;
		}
		set gurl(value: string) {
			pb_1.Message.setField(this, 3, value);
		}
		get proxy() {
			return pb_1.Message.getFieldWithDefault(this, 5, '') as string;
		}
		set proxy(value: string) {
			pb_1.Message.setField(this, 5, value);
		}
		static fromObject(data: {
			id?: string;
			conmanURL?: string;
			gurl?: string;
			proxy?: string;
		}): ClusterMetadata {
			const message = new ClusterMetadata({});
			if (data.id != null) {
				message.id = data.id;
			}
			if (data.conmanURL != null) {
				message.conmanURL = data.conmanURL;
			}
			if (data.gurl != null) {
				message.gurl = data.gurl;
			}
			if (data.proxy != null) {
				message.proxy = data.proxy;
			}
			return message;
		}
		toObject() {
			const data: {
				id?: string;
				conmanURL?: string;
				gurl?: string;
				proxy?: string;
			} = {};
			if (this.id != null) {
				data.id = this.id;
			}
			if (this.conmanURL != null) {
				data.conmanURL = this.conmanURL;
			}
			if (this.gurl != null) {
				data.gurl = this.gurl;
			}
			if (this.proxy != null) {
				data.proxy = this.proxy;
			}
			return data;
		}
		serialize(): Uint8Array;
		serialize(w: pb_1.BinaryWriter): void;
		serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
			const writer = w || new pb_1.BinaryWriter();
			if (this.id.length) writer.writeString(1, this.id);
			if (this.conmanURL.length) writer.writeString(2, this.conmanURL);
			if (this.gurl.length) writer.writeString(3, this.gurl);
			if (this.proxy.length) writer.writeString(5, this.proxy);
			if (!w) return writer.getResultBuffer();
		}
		static deserialize(
			bytes: Uint8Array | pb_1.BinaryReader,
		): ClusterMetadata {
			const reader =
					bytes instanceof pb_1.BinaryReader
						? bytes
						: new pb_1.BinaryReader(bytes),
				message = new ClusterMetadata();
			while (reader.nextField()) {
				if (reader.isEndGroup()) break;
				switch (reader.getFieldNumber()) {
					case 1:
						message.id = reader.readString();
						break;
					case 2:
						message.conmanURL = reader.readString();
						break;
					case 3:
						message.gurl = reader.readString();
						break;
					case 5:
						message.proxy = reader.readString();
						break;
					default:
						reader.skipField();
				}
			}
			return message;
		}
		serializeBinary(): Uint8Array {
			return this.serialize();
		}
		static deserializeBinary(bytes: Uint8Array): ClusterMetadata {
			return ClusterMetadata.deserialize(bytes);
		}
	}
	export class EvictReplRequest extends pb_1.Message {
		#one_of_decls: number[][] = [];
		constructor(
			data?:
				| any[]
				| {
						clusterMetadata?: ClusterMetadata;
						token?: string;
						user?: string;
						slug?: string;
				  },
		) {
			super();
			pb_1.Message.initialize(
				this,
				Array.isArray(data) ? data : [],
				0,
				-1,
				[],
				this.#one_of_decls,
			);
			if (!Array.isArray(data) && typeof data == 'object') {
				if (
					'clusterMetadata' in data &&
					data.clusterMetadata != undefined
				) {
					this.clusterMetadata = data.clusterMetadata;
				}
				if ('token' in data && data.token != undefined) {
					this.token = data.token;
				}
				if ('user' in data && data.user != undefined) {
					this.user = data.user;
				}
				if ('slug' in data && data.slug != undefined) {
					this.slug = data.slug;
				}
			}
		}
		get clusterMetadata() {
			return pb_1.Message.getWrapperField(
				this,
				ClusterMetadata,
				1,
			) as ClusterMetadata;
		}
		set clusterMetadata(value: ClusterMetadata) {
			pb_1.Message.setWrapperField(this, 1, value);
		}
		get has_clusterMetadata() {
			return pb_1.Message.getField(this, 1) != null;
		}
		get token() {
			return pb_1.Message.getFieldWithDefault(this, 2, '') as string;
		}
		set token(value: string) {
			pb_1.Message.setField(this, 2, value);
		}
		get user() {
			return pb_1.Message.getFieldWithDefault(this, 3, '') as string;
		}
		set user(value: string) {
			pb_1.Message.setField(this, 3, value);
		}
		get slug() {
			return pb_1.Message.getFieldWithDefault(this, 4, '') as string;
		}
		set slug(value: string) {
			pb_1.Message.setField(this, 4, value);
		}
		static fromObject(data: {
			clusterMetadata?: ReturnType<
				typeof ClusterMetadata.prototype.toObject
			>;
			token?: string;
			user?: string;
			slug?: string;
		}): EvictReplRequest {
			const message = new EvictReplRequest({});
			if (data.clusterMetadata != null) {
				message.clusterMetadata = ClusterMetadata.fromObject(
					data.clusterMetadata,
				);
			}
			if (data.token != null) {
				message.token = data.token;
			}
			if (data.user != null) {
				message.user = data.user;
			}
			if (data.slug != null) {
				message.slug = data.slug;
			}
			return message;
		}
		toObject() {
			const data: {
				clusterMetadata?: ReturnType<
					typeof ClusterMetadata.prototype.toObject
				>;
				token?: string;
				user?: string;
				slug?: string;
			} = {};
			if (this.clusterMetadata != null) {
				data.clusterMetadata = this.clusterMetadata.toObject();
			}
			if (this.token != null) {
				data.token = this.token;
			}
			if (this.user != null) {
				data.user = this.user;
			}
			if (this.slug != null) {
				data.slug = this.slug;
			}
			return data;
		}
		serialize(): Uint8Array;
		serialize(w: pb_1.BinaryWriter): void;
		serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
			const writer = w || new pb_1.BinaryWriter();
			if (this.has_clusterMetadata)
				writer.writeMessage(1, this.clusterMetadata, () =>
					this.clusterMetadata.serialize(writer),
				);
			if (this.token.length) writer.writeString(2, this.token);
			if (this.user.length) writer.writeString(3, this.user);
			if (this.slug.length) writer.writeString(4, this.slug);
			if (!w) return writer.getResultBuffer();
		}
		static deserialize(
			bytes: Uint8Array | pb_1.BinaryReader,
		): EvictReplRequest {
			const reader =
					bytes instanceof pb_1.BinaryReader
						? bytes
						: new pb_1.BinaryReader(bytes),
				message = new EvictReplRequest();
			while (reader.nextField()) {
				if (reader.isEndGroup()) break;
				switch (reader.getFieldNumber()) {
					case 1:
						reader.readMessage(
							message.clusterMetadata,
							() =>
								(message.clusterMetadata =
									ClusterMetadata.deserialize(reader)),
						);
						break;
					case 2:
						message.token = reader.readString();
						break;
					case 3:
						message.user = reader.readString();
						break;
					case 4:
						message.slug = reader.readString();
						break;
					default:
						reader.skipField();
				}
			}
			return message;
		}
		serializeBinary(): Uint8Array {
			return this.serialize();
		}
		static deserializeBinary(bytes: Uint8Array): EvictReplRequest {
			return EvictReplRequest.deserialize(bytes);
		}
	}
	export class EvictReplResponse extends pb_1.Message {
		#one_of_decls: number[][] = [];
		constructor(
			data?:
				| any[]
				| {
						replTransfer?: ReplTransfer;
				  },
		) {
			super();
			pb_1.Message.initialize(
				this,
				Array.isArray(data) ? data : [],
				0,
				-1,
				[],
				this.#one_of_decls,
			);
			if (!Array.isArray(data) && typeof data == 'object') {
				if ('replTransfer' in data && data.replTransfer != undefined) {
					this.replTransfer = data.replTransfer;
				}
			}
		}
		get replTransfer() {
			return pb_1.Message.getWrapperField(
				this,
				ReplTransfer,
				1,
			) as ReplTransfer;
		}
		set replTransfer(value: ReplTransfer) {
			pb_1.Message.setWrapperField(this, 1, value);
		}
		get has_replTransfer() {
			return pb_1.Message.getField(this, 1) != null;
		}
		static fromObject(data: {
			replTransfer?: ReturnType<typeof ReplTransfer.prototype.toObject>;
		}): EvictReplResponse {
			const message = new EvictReplResponse({});
			if (data.replTransfer != null) {
				message.replTransfer = ReplTransfer.fromObject(
					data.replTransfer,
				);
			}
			return message;
		}
		toObject() {
			const data: {
				replTransfer?: ReturnType<
					typeof ReplTransfer.prototype.toObject
				>;
			} = {};
			if (this.replTransfer != null) {
				data.replTransfer = this.replTransfer.toObject();
			}
			return data;
		}
		serialize(): Uint8Array;
		serialize(w: pb_1.BinaryWriter): void;
		serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
			const writer = w || new pb_1.BinaryWriter();
			if (this.has_replTransfer)
				writer.writeMessage(1, this.replTransfer, () =>
					this.replTransfer.serialize(writer),
				);
			if (!w) return writer.getResultBuffer();
		}
		static deserialize(
			bytes: Uint8Array | pb_1.BinaryReader,
		): EvictReplResponse {
			const reader =
					bytes instanceof pb_1.BinaryReader
						? bytes
						: new pb_1.BinaryReader(bytes),
				message = new EvictReplResponse();
			while (reader.nextField()) {
				if (reader.isEndGroup()) break;
				switch (reader.getFieldNumber()) {
					case 1:
						reader.readMessage(
							message.replTransfer,
							() =>
								(message.replTransfer =
									ReplTransfer.deserialize(reader)),
						);
						break;
					default:
						reader.skipField();
				}
			}
			return message;
		}
		serializeBinary(): Uint8Array {
			return this.serialize();
		}
		static deserializeBinary(bytes: Uint8Array): EvictReplResponse {
			return EvictReplResponse.deserialize(bytes);
		}
	}
}
